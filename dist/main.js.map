{"version":3,"file":"main.js","sources":["../src/common/ipcevents.ts","../src/main/events.ts","../src/main/index.ts"],"sourcesContent":["const IPCEvents = {\r\n    COMPILE_SCSS: \"HOLYMOD_COMPILE_SCSS\",\r\n    COMPILE_TYPESCRIPT: \"HOLYMOD_COMPILE_TYPESCRIPT\",\r\n    COMPILE_JAVASCRIPT: \"HOLYMOD_COMPILE_JAVASCRIPT\",\r\n    GET_APP_PATH: \"HOLYMOD_GET_APP_PATH\"\r\n};\r\n\r\nexport default IPCEvents;","import {ipcMain as IPC, app} from \"electron\";\r\nimport IPCEvents from \"../common/ipcevents\";\r\nimport fs from \"fs\";\r\n\r\nconst log = console.log.bind(null, \"[Holymod]\");\r\n\r\nexport default class Events {\r\n    static register(): void {\r\n        this.registerCompilers();\r\n\r\n        IPC.on(IPCEvents.GET_APP_PATH, (event) => {\r\n            event.returnValue = app.getAppPath();\r\n        });\r\n    }\r\n\r\n    static async registerCompilers(): Promise<void> {\r\n        log(\"[Compilers] loading.\");\r\n        const sucrase = await import(\"sucrase\");\r\n        const sass = await import(\"sass\");\r\n\r\n        IPC.on(IPCEvents.COMPILE_JAVASCRIPT, (event, filePath: string) => {\r\n            if (!fs.existsSync(filePath) || !fs.statSync(filePath).isFile()) {\r\n                return event.returnValue = \"ERROR: File not found\";\r\n            }\r\n            let code = \"\";\r\n\r\n            try {\r\n                const filecontent = fs.readFileSync(filePath, \"utf8\");\r\n                ({code} = sucrase.transform(filecontent, {\r\n                    transforms: [\"imports\", \"jsx\"],\r\n                    production: false\r\n                }));\r\n            } catch (error) {\r\n                log(\"Failed to compile JS:\", error);\r\n            }\r\n\r\n            event.returnValue = code;\r\n        });\r\n\r\n        IPC.on(IPCEvents.COMPILE_TYPESCRIPT, (event, filePath: string) => {\r\n            if (!fs.existsSync(filePath) || !fs.statSync(filePath).isFile()) {\r\n                return event.returnValue = \"ERROR: File not found\";\r\n            }\r\n            let code = \"\";\r\n    \r\n            try {\r\n                const filecontent = fs.readFileSync(filePath, \"utf8\");\r\n                ({code} = sucrase.transform(filecontent, {\r\n                    transforms: [\"typescript\", \"imports\", \"jsx\"],\r\n                    production: false\r\n                }));\r\n            } catch (error) {\r\n                log(\"Failed to compile TS:\", error);\r\n            }\r\n\r\n            event.returnValue = code;\r\n        });\r\n\r\n        IPC.on(IPCEvents.COMPILE_SCSS, (event, filePath: string) => {\r\n            if (!fs.existsSync(filePath) || !fs.statSync(filePath).isFile()) {\r\n                return event.returnValue = \"ERROR: File not found\";\r\n            }\r\n            let css = \"\";\r\n\r\n            try {\r\n                const filecontent = fs.readFileSync(filePath, \"utf8\");\r\n                ({css} = sass.compile(filecontent, {}));\r\n            } catch (error) {\r\n                log(\"Failed to compile SCSS:\", error);\r\n            }\r\n\r\n            event.returnValue = css.toString();\r\n        });\r\n    }\r\n}","import NodeModule from \"module\";\r\nimport path from \"path\";\r\nimport Events from \"./events\";\r\n\r\nconst Module: typeof NodeModule & {globalPaths: string[]} = NodeModule as unknown as any;\r\nconst modulesPath = path.resolve(\".\", \"..\", \"node_modules\");\r\n\r\nif (!~Module.globalPaths.indexOf(modulesPath)) {\r\n    Module.globalPaths.push(modulesPath);\r\n}\r\n\r\nEvents.register();"],"names":["IPCEvents","COMPILE_SCSS","COMPILE_TYPESCRIPT","COMPILE_JAVASCRIPT","GET_APP_PATH","log","console","bind","Events","register","registerCompilers","IPC","on","event","returnValue","app","getAppPath","sucrase","import","sass","filePath","fs","existsSync","statSync","isFile","code","filecontent","readFileSync","transform","transforms","production","error","css","compile","toString","Module","NodeModule","modulesPath","path","resolve","globalPaths","indexOf","push"],"mappings":"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"}